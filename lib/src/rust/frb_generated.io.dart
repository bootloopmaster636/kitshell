// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, non_constant_identifier_names, unused_field

import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';
import 'package:kitshell/src/rust/api/appmenu/appmenu_items.dart';
import 'package:kitshell/src/rust/api/display_info.dart';
import 'package:kitshell/src/rust/api/mpris/cava.dart';
import 'package:kitshell/src/rust/api/mpris/mpris.dart';
import 'package:kitshell/src/rust/api/notifications.dart';
import 'package:kitshell/src/rust/api/quick_settings/battery.dart';
import 'package:kitshell/src/rust/api/quick_settings/display_brightness.dart';
import 'package:kitshell/src/rust/api/quick_settings/whoami.dart';
import 'package:kitshell/src/rust/api/wm_interface/base.dart';
import 'package:kitshell/src/rust/api/wm_interface/niri.dart';
import 'package:kitshell/src/rust/frb_generated.dart';
import 'package:kitshell/src/rust/lib.dart';
import 'package:kitshell/src/rust/third_party/mpris.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  DateTime dco_decode_Chrono_Local(dynamic raw);

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw);

  @protected
  RustStreamSink<CavaState> dco_decode_StreamSink_cava_state_Sse(dynamic raw);

  @protected
  RustStreamSink<List<BacklightInfo>>
  dco_decode_StreamSink_list_backlight_info_Sse(dynamic raw);

  @protected
  RustStreamSink<List<BatteryInfo>> dco_decode_StreamSink_list_battery_info_Sse(
    dynamic raw,
  );

  @protected
  RustStreamSink<NotificationData> dco_decode_StreamSink_notification_data_Sse(
    dynamic raw,
  );

  @protected
  RustStreamSink<TrackProgress?>
  dco_decode_StreamSink_opt_box_autoadd_track_progress_Sse(dynamic raw);

  @protected
  RustStreamSink<WmState> dco_decode_StreamSink_wm_state_Sse(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  WmInterface dco_decode_TraitDef_WmInterface(dynamic raw);

  @protected
  AppEntry dco_decode_app_entry(dynamic raw);

  @protected
  BacklightInfo dco_decode_backlight_info(dynamic raw);

  @protected
  BatteryInfo dco_decode_battery_info(dynamic raw);

  @protected
  BatteryState dco_decode_battery_state(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw);

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw);

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw);

  @protected
  TrackProgress dco_decode_box_autoadd_track_progress(dynamic raw);

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  CavaState dco_decode_cava_state(dynamic raw);

  @protected
  DispInfo dco_decode_disp_info(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  LaunchbarItemState dco_decode_launchbar_item_state(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<AppEntry> dco_decode_list_app_entry(dynamic raw);

  @protected
  List<BacklightInfo> dco_decode_list_backlight_info(dynamic raw);

  @protected
  List<BatteryInfo> dco_decode_list_battery_info(dynamic raw);

  @protected
  List<DispInfo> dco_decode_list_disp_info(dynamic raw);

  @protected
  List<LaunchbarItemState> dco_decode_list_launchbar_item_state(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw);

  @protected
  List<WorkspaceItemState> dco_decode_list_workspace_item_state(dynamic raw);

  @protected
  List<WorkspaceState> dco_decode_list_workspace_state(dynamic raw);

  @protected
  LoopStatus dco_decode_loop_status(dynamic raw);

  @protected
  Niri dco_decode_niri(dynamic raw);

  @protected
  NotificationData dco_decode_notification_data(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw);

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw);

  @protected
  TrackProgress? dco_decode_opt_box_autoadd_track_progress(dynamic raw);

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw);

  @protected
  PlaybackStatus dco_decode_playback_status(dynamic raw);

  @protected
  PlayerInfo dco_decode_player_info(dynamic raw);

  @protected
  PlayerOperations dco_decode_player_operations(dynamic raw);

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw);

  @protected
  TrackMetadata dco_decode_track_metadata(dynamic raw);

  @protected
  TrackProgress dco_decode_track_progress(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  U8Array32 dco_decode_u_8_array_32(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  UserInfo dco_decode_user_info(dynamic raw);

  @protected
  WindowManager dco_decode_window_manager(dynamic raw);

  @protected
  WmState dco_decode_wm_state(dynamic raw);

  @protected
  WorkspaceItemState dco_decode_workspace_item_state(dynamic raw);

  @protected
  WorkspaceState dco_decode_workspace_state(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_Chrono_Local(SseDeserializer deserializer);

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
    SseDeserializer deserializer,
  );

  @protected
  RustStreamSink<CavaState> sse_decode_StreamSink_cava_state_Sse(
    SseDeserializer deserializer,
  );

  @protected
  RustStreamSink<List<BacklightInfo>>
  sse_decode_StreamSink_list_backlight_info_Sse(SseDeserializer deserializer);

  @protected
  RustStreamSink<List<BatteryInfo>> sse_decode_StreamSink_list_battery_info_Sse(
    SseDeserializer deserializer,
  );

  @protected
  RustStreamSink<NotificationData> sse_decode_StreamSink_notification_data_Sse(
    SseDeserializer deserializer,
  );

  @protected
  RustStreamSink<TrackProgress?>
  sse_decode_StreamSink_opt_box_autoadd_track_progress_Sse(
    SseDeserializer deserializer,
  );

  @protected
  RustStreamSink<WmState> sse_decode_StreamSink_wm_state_Sse(
    SseDeserializer deserializer,
  );

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AppEntry sse_decode_app_entry(SseDeserializer deserializer);

  @protected
  BacklightInfo sse_decode_backlight_info(SseDeserializer deserializer);

  @protected
  BatteryInfo sse_decode_battery_info(SseDeserializer deserializer);

  @protected
  BatteryState sse_decode_battery_state(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer);

  @protected
  TrackProgress sse_decode_box_autoadd_track_progress(
    SseDeserializer deserializer,
  );

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  CavaState sse_decode_cava_state(SseDeserializer deserializer);

  @protected
  DispInfo sse_decode_disp_info(SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  LaunchbarItemState sse_decode_launchbar_item_state(
    SseDeserializer deserializer,
  );

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<AppEntry> sse_decode_list_app_entry(SseDeserializer deserializer);

  @protected
  List<BacklightInfo> sse_decode_list_backlight_info(
    SseDeserializer deserializer,
  );

  @protected
  List<BatteryInfo> sse_decode_list_battery_info(SseDeserializer deserializer);

  @protected
  List<DispInfo> sse_decode_list_disp_info(SseDeserializer deserializer);

  @protected
  List<LaunchbarItemState> sse_decode_list_launchbar_item_state(
    SseDeserializer deserializer,
  );

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  );

  @protected
  List<WorkspaceItemState> sse_decode_list_workspace_item_state(
    SseDeserializer deserializer,
  );

  @protected
  List<WorkspaceState> sse_decode_list_workspace_state(
    SseDeserializer deserializer,
  );

  @protected
  LoopStatus sse_decode_loop_status(SseDeserializer deserializer);

  @protected
  Niri sse_decode_niri(SseDeserializer deserializer);

  @protected
  NotificationData sse_decode_notification_data(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer);

  @protected
  TrackProgress? sse_decode_opt_box_autoadd_track_progress(
    SseDeserializer deserializer,
  );

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer);

  @protected
  PlaybackStatus sse_decode_playback_status(SseDeserializer deserializer);

  @protected
  PlayerInfo sse_decode_player_info(SseDeserializer deserializer);

  @protected
  PlayerOperations sse_decode_player_operations(SseDeserializer deserializer);

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  );

  @protected
  TrackMetadata sse_decode_track_metadata(SseDeserializer deserializer);

  @protected
  TrackProgress sse_decode_track_progress(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  UserInfo sse_decode_user_info(SseDeserializer deserializer);

  @protected
  WindowManager sse_decode_window_manager(SseDeserializer deserializer);

  @protected
  WmState sse_decode_wm_state(SseDeserializer deserializer);

  @protected
  WorkspaceItemState sse_decode_workspace_item_state(
    SseDeserializer deserializer,
  );

  @protected
  WorkspaceState sse_decode_workspace_state(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_Chrono_Local(DateTime self, SseSerializer serializer);

  @protected
  void sse_encode_Map_String_String_None(
    Map<String, String> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_StreamSink_cava_state_Sse(
    RustStreamSink<CavaState> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_StreamSink_list_backlight_info_Sse(
    RustStreamSink<List<BacklightInfo>> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_StreamSink_list_battery_info_Sse(
    RustStreamSink<List<BatteryInfo>> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_StreamSink_notification_data_Sse(
    RustStreamSink<NotificationData> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_StreamSink_opt_box_autoadd_track_progress_Sse(
    RustStreamSink<TrackProgress?> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_StreamSink_wm_state_Sse(
    RustStreamSink<WmState> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_app_entry(AppEntry self, SseSerializer serializer);

  @protected
  void sse_encode_backlight_info(BacklightInfo self, SseSerializer serializer);

  @protected
  void sse_encode_battery_info(BatteryInfo self, SseSerializer serializer);

  @protected
  void sse_encode_battery_state(BatteryState self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_track_progress(
    TrackProgress self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_cava_state(CavaState self, SseSerializer serializer);

  @protected
  void sse_encode_disp_info(DispInfo self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_launchbar_item_state(
    LaunchbarItemState self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_app_entry(List<AppEntry> self, SseSerializer serializer);

  @protected
  void sse_encode_list_backlight_info(
    List<BacklightInfo> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_battery_info(
    List<BatteryInfo> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_disp_info(List<DispInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_launchbar_item_state(
    List<LaunchbarItemState> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_workspace_item_state(
    List<WorkspaceItemState> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_workspace_state(
    List<WorkspaceState> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_loop_status(LoopStatus self, SseSerializer serializer);

  @protected
  void sse_encode_niri(Niri self, SseSerializer serializer);

  @protected
  void sse_encode_notification_data(
    NotificationData self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_track_progress(
    TrackProgress? self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_String(List<String>? self, SseSerializer serializer);

  @protected
  void sse_encode_playback_status(
    PlaybackStatus self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_player_info(PlayerInfo self, SseSerializer serializer);

  @protected
  void sse_encode_player_operations(
    PlayerOperations self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_track_metadata(TrackMetadata self, SseSerializer serializer);

  @protected
  void sse_encode_track_progress(TrackProgress self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_user_info(UserInfo self, SseSerializer serializer);

  @protected
  void sse_encode_window_manager(WindowManager self, SseSerializer serializer);

  @protected
  void sse_encode_wm_state(WmState self, SseSerializer serializer);

  @protected
  void sse_encode_workspace_item_state(
    WorkspaceItemState self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_workspace_state(
    WorkspaceState self,
    SseSerializer serializer,
  );
}

// Section: wire_class

class RustLibWire implements BaseWire {
  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;
}
