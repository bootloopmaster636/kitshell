// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:kitshell/src/rust/frb_generated.dart';

Future<WindowManager> detectCurrentWm() =>
    RustLib.instance.api.crateApiWmInterfaceBaseWmDetectCurrentWm();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VarError>>
abstract class VarError implements RustOpaqueInterface {}

abstract class WmWindows {}

class LaunchbarItemState {
  const LaunchbarItemState({
    required this.windowId,
    required this.appId,
    required this.windowTitle,
    required this.workspaceId,
    required this.processId,
    required this.isFocused,
  });
  final String windowId;
  final String appId;
  final String windowTitle;
  final int workspaceId;
  final int processId;
  final bool isFocused;

  @override
  int get hashCode =>
      windowId.hashCode ^
      appId.hashCode ^
      windowTitle.hashCode ^
      workspaceId.hashCode ^
      processId.hashCode ^
      isFocused.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LaunchbarItemState &&
          runtimeType == other.runtimeType &&
          windowId == other.windowId &&
          appId == other.appId &&
          windowTitle == other.windowTitle &&
          workspaceId == other.workspaceId &&
          processId == other.processId &&
          isFocused == other.isFocused;
}

class LaunchbarState {
  const LaunchbarState({
    required this.launchbar,
    required this.workspaces,
  });
  final List<LaunchbarItemState> launchbar;
  final List<WorkspaceItemState> workspaces;

  @override
  int get hashCode => launchbar.hashCode ^ workspaces.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LaunchbarState &&
          runtimeType == other.runtimeType &&
          launchbar == other.launchbar &&
          workspaces == other.workspaces;
}

enum WindowManager {
  niri,
  hyprland,
  unsupported,
}

class WorkspaceItemState {
  const WorkspaceItemState({
    required this.id,
    this.name,
  });
  final int id;
  final String? name;

  @override
  int get hashCode => id.hashCode ^ name.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WorkspaceItemState &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name;
}
