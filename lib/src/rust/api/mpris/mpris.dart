// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:kitshell/src/rust/frb_generated.dart';
import 'package:kitshell/src/rust/third_party/mpris.dart';

// These functions are ignored because they are not marked as `pub`: `get_calculated_progress`, `get_player_info`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`

Stream<TrackProgress?> watchMediaPlayerEvents() =>
    RustLib.instance.api.crateApiMprisMprisWatchMediaPlayerEvents();

/// Struct that contains info regarding Player application
class PlayerInfo {
  const PlayerInfo({
    required this.friendlyName,
    required this.canBeControlled,
    required this.canGoPrev,
    required this.canGoNext,
    required this.canPlay,
    required this.canPause,
    required this.canStop,
    this.desktopEntry,
  });
  final String friendlyName;
  final String? desktopEntry;
  final bool canBeControlled;
  final bool canGoPrev;
  final bool canGoNext;
  final bool canPlay;
  final bool canPause;
  final bool canStop;

  @override
  int get hashCode =>
      friendlyName.hashCode ^
      desktopEntry.hashCode ^
      canBeControlled.hashCode ^
      canGoPrev.hashCode ^
      canGoNext.hashCode ^
      canPlay.hashCode ^
      canPause.hashCode ^
      canStop.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PlayerInfo &&
          runtimeType == other.runtimeType &&
          friendlyName == other.friendlyName &&
          desktopEntry == other.desktopEntry &&
          canBeControlled == other.canBeControlled &&
          canGoPrev == other.canGoPrev &&
          canGoNext == other.canGoNext &&
          canPlay == other.canPlay &&
          canPause == other.canPause &&
          canStop == other.canStop;
}

/// Struct copying the content of [`mpris::Metadata`]
///
/// Visit [mpris crate docs](https://docs.rs/mpris/2.0.1/mpris/struct.Metadata.html) for more information
/// and description regarding fields in this struct
class TrackMetadata {
  const TrackMetadata({
    this.title,
    this.artists,
    this.album,
    this.artUrl,
    this.trackId,
  });
  final String? title;
  final List<String>? artists;
  final String? album;
  final String? artUrl;
  final String? trackId;

  @override
  int get hashCode =>
      title.hashCode ^
      artists.hashCode ^
      album.hashCode ^
      artUrl.hashCode ^
      trackId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TrackMetadata &&
          runtimeType == other.runtimeType &&
          title == other.title &&
          artists == other.artists &&
          album == other.album &&
          artUrl == other.artUrl &&
          trackId == other.trackId;
}

/// Struct copying the content of [`mpris::Progress`]
///
/// Visit [mpris crate docs](https://docs.rs/mpris/2.0.1/mpris/struct.Progress.html) for more information
/// and description regarding fields in this struct
class TrackProgress {
  const TrackProgress({
    required this.metadata,
    required this.playbackStatus,
    required this.shuffleEnabled,
    required this.loopStatus,
    required this.player,
    this.progress,
  });
  final TrackMetadata metadata;
  final PlaybackStatus playbackStatus;
  final bool shuffleEnabled;
  final LoopStatus loopStatus;

  /// This is calculated progress from difference between [`mpris::Progress::position`]
  /// and [`mpris::Progress::length`]
  final double? progress;

  /// Info about player, inserted here just for easier access
  final PlayerInfo player;

  @override
  int get hashCode =>
      metadata.hashCode ^
      playbackStatus.hashCode ^
      shuffleEnabled.hashCode ^
      loopStatus.hashCode ^
      progress.hashCode ^
      player.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TrackProgress &&
          runtimeType == other.runtimeType &&
          metadata == other.metadata &&
          playbackStatus == other.playbackStatus &&
          shuffleEnabled == other.shuffleEnabled &&
          loopStatus == other.loopStatus &&
          progress == other.progress &&
          player == other.player;
}
