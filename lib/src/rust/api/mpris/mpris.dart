// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:kitshell/src/rust/frb_generated.dart';
import 'package:kitshell/src/rust/third_party/mpris.dart';

part 'mpris.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `get_normalized_progress`, `get_player_info`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`

Stream<TrackProgress?> watchMediaPlayerEvents() =>
    RustLib.instance.api.crateApiMprisMprisWatchMediaPlayerEvents();

Future<void> dispatchPlayerAction({required PlayerOperations action}) =>
    RustLib.instance.api.crateApiMprisMprisDispatchPlayerAction(action: action);

/// Struct that contains info regarding Player application
class PlayerInfo {
  const PlayerInfo({
    required this.friendlyName,
    required this.canBeRaised,
    required this.canBeControlled,
    required this.canGoPrev,
    required this.canGoNext,
    required this.canPlay,
    required this.canPause,
    required this.canStop,
    required this.canShuffle,
    required this.canLoop,
    this.desktopEntry,
  });
  final String friendlyName;
  final String? desktopEntry;
  final bool canBeRaised;
  final bool canBeControlled;
  final bool canGoPrev;
  final bool canGoNext;
  final bool canPlay;
  final bool canPause;
  final bool canStop;
  final bool canShuffle;
  final bool canLoop;

  @override
  int get hashCode =>
      friendlyName.hashCode ^
      desktopEntry.hashCode ^
      canBeRaised.hashCode ^
      canBeControlled.hashCode ^
      canGoPrev.hashCode ^
      canGoNext.hashCode ^
      canPlay.hashCode ^
      canPause.hashCode ^
      canStop.hashCode ^
      canShuffle.hashCode ^
      canLoop.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PlayerInfo &&
          runtimeType == other.runtimeType &&
          friendlyName == other.friendlyName &&
          desktopEntry == other.desktopEntry &&
          canBeRaised == other.canBeRaised &&
          canBeControlled == other.canBeControlled &&
          canGoPrev == other.canGoPrev &&
          canGoNext == other.canGoNext &&
          canPlay == other.canPlay &&
          canPause == other.canPause &&
          canStop == other.canStop &&
          canShuffle == other.canShuffle &&
          canLoop == other.canLoop;
}

@freezed
sealed class PlayerOperations with _$PlayerOperations {
  const PlayerOperations._();

  const factory PlayerOperations.play() = PlayerOperations_Play;
  const factory PlayerOperations.pause() = PlayerOperations_Pause;
  const factory PlayerOperations.togglePlayPause() =
      PlayerOperations_TogglePlayPause;
  const factory PlayerOperations.nextTrack() = PlayerOperations_NextTrack;
  const factory PlayerOperations.prevTrack() = PlayerOperations_PrevTrack;
  const factory PlayerOperations.toggleShuffle() =
      PlayerOperations_ToggleShuffle;

  /// Set loop status with status once, playlist, disable, then back to once
  const factory PlayerOperations.setLoop() = PlayerOperations_SetLoop;

  /// Seek song (with offset in MICROseconds)
  const factory PlayerOperations.seek({
    required PlatformInt64 offsetUs,
  }) = PlayerOperations_Seek;

  /// Set position of player
  const factory PlayerOperations.setPosition({
    required String trackId,
    required BigInt positionUs,
  }) = PlayerOperations_SetPosition;

  /// Open player
  const factory PlayerOperations.open() = PlayerOperations_Open;
}

/// Struct copying the content of [`mpris::Metadata`]
///
/// Visit [mpris crate docs](https://docs.rs/mpris/2.0.1/mpris/struct.Metadata.html) for more information
/// and description regarding fields in this struct
class TrackMetadata {
  const TrackMetadata({
    this.title,
    this.artists,
    this.album,
    this.artUrl,
    this.trackId,
    this.trackLength,
  });
  final String? title;
  final List<String>? artists;
  final String? album;
  final String? artUrl;
  final String? trackId;
  final Duration? trackLength;

  @override
  int get hashCode =>
      title.hashCode ^
      artists.hashCode ^
      album.hashCode ^
      artUrl.hashCode ^
      trackId.hashCode ^
      trackLength.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TrackMetadata &&
          runtimeType == other.runtimeType &&
          title == other.title &&
          artists == other.artists &&
          album == other.album &&
          artUrl == other.artUrl &&
          trackId == other.trackId &&
          trackLength == other.trackLength;
}

/// Struct copying the content of [`mpris::Progress`]
///
/// Visit [mpris crate docs](https://docs.rs/mpris/2.0.1/mpris/struct.Progress.html) for more information
/// and description regarding fields in this struct
class TrackProgress {
  const TrackProgress({
    required this.metadata,
    required this.playbackStatus,
    required this.shuffleEnabled,
    required this.loopStatus,
    required this.progressDuration,
    required this.player,
    this.progressNormalized,
  });
  final TrackMetadata metadata;
  final PlaybackStatus playbackStatus;
  final bool shuffleEnabled;
  final LoopStatus loopStatus;

  /// This is calculated progress from difference between [`mpris::Progress::position`]
  /// and [`mpris::Progress::length`]
  final double? progressNormalized;
  final Duration progressDuration;

  /// Info about player, inserted here just for easier access
  final PlayerInfo player;

  @override
  int get hashCode =>
      metadata.hashCode ^
      playbackStatus.hashCode ^
      shuffleEnabled.hashCode ^
      loopStatus.hashCode ^
      progressNormalized.hashCode ^
      progressDuration.hashCode ^
      player.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TrackProgress &&
          runtimeType == other.runtimeType &&
          metadata == other.metadata &&
          playbackStatus == other.playbackStatus &&
          shuffleEnabled == other.shuffleEnabled &&
          loopStatus == other.loopStatus &&
          progressNormalized == other.progressNormalized &&
          progressDuration == other.progressDuration &&
          player == other.player;
}
