// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:kitshell/src/rust/api/appmenu/appmenu_items.dart';
import 'package:kitshell/src/rust/api/display_info.dart';
import 'package:kitshell/src/rust/api/notifications.dart';
import 'package:kitshell/src/rust/api/quick_settings/battery.dart';
import 'package:kitshell/src/rust/api/quick_settings/display_brightness.dart';
import 'package:kitshell/src/rust/api/quick_settings/whoami.dart';
import 'package:kitshell/src/rust/frb_generated.dart';
import 'package:kitshell/src/rust/frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  RustLib._();
  @internal
  static final instance = RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -943103934;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_kitshell',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  NotificationService
  crateApiNotificationsNotificationDbusAutoAccessorGetService({
    required NotificationDbus that,
  });

  void crateApiNotificationsNotificationDbusAutoAccessorSetService({
    required NotificationDbus that,
    required NotificationService service,
  });

  Future<void> crateApiQuickSettingsDisplayBrightnessChangeBrightness({
    required String name,
    required int value,
  });

  Future<List<AppEntry>> crateApiAppmenuAppmenuItemsGetAppmenuItems({
    required String locale,
  });

  Future<String> crateApiAppmenuAppmenuItemsGetIconPath({required String icon});

  DispInfo crateApiDisplayInfoGetPrimaryDisplayInfo();

  Future<UserInfo> crateApiQuickSettingsWhoamiGetUserInfo();

  Future<void> crateApiNotificationsInvokeNotifAction({
    required int id,
    required String actionKey,
  });

  Future<void> crateApiAppmenuAppmenuItemsLaunchApp({
    required List<String> exec,
    required bool useTerminal,
  });

  Stream<List<BacklightInfo>>
  crateApiQuickSettingsDisplayBrightnessWatchBacklightEvent();

  Stream<List<BatteryInfo>> crateApiQuickSettingsBatteryWatchBatteryEvent();

  Stream<NotificationData> crateApiNotificationsWatchNotificationBus();

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_NotificationDbus;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_NotificationDbus;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_NotificationDbusPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  NotificationService
  crateApiNotificationsNotificationDbusAutoAccessorGetService({
    required NotificationDbus that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_notification_service,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiNotificationsNotificationDbusAutoAccessorGetServiceConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiNotificationsNotificationDbusAutoAccessorGetServiceConstMeta =>
      const TaskConstMeta(
        debugName: 'NotificationDbus_auto_accessor_get_service',
        argNames: ['that'],
      );

  @override
  void crateApiNotificationsNotificationDbusAutoAccessorSetService({
    required NotificationDbus that,
    required NotificationService service,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
            that,
            serializer,
          );
          sse_encode_notification_service(service, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiNotificationsNotificationDbusAutoAccessorSetServiceConstMeta,
        argValues: [that, service],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiNotificationsNotificationDbusAutoAccessorSetServiceConstMeta =>
      const TaskConstMeta(
        debugName: 'NotificationDbus_auto_accessor_set_service',
        argNames: ['that', 'service'],
      );

  @override
  Future<void> crateApiQuickSettingsDisplayBrightnessChangeBrightness({
    required String name,
    required int value,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          sse_encode_u_16(value, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiQuickSettingsDisplayBrightnessChangeBrightnessConstMeta,
        argValues: [name, value],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiQuickSettingsDisplayBrightnessChangeBrightnessConstMeta =>
      const TaskConstMeta(
        debugName: 'change_brightness',
        argNames: ['name', 'value'],
      );

  @override
  Future<List<AppEntry>> crateApiAppmenuAppmenuItemsGetAppmenuItems({
    required String locale,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(locale, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_app_entry,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiAppmenuAppmenuItemsGetAppmenuItemsConstMeta,
        argValues: [locale],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAppmenuAppmenuItemsGetAppmenuItemsConstMeta =>
      const TaskConstMeta(
        debugName: 'get_appmenu_items',
        argNames: ['locale'],
      );

  @override
  Future<String> crateApiAppmenuAppmenuItemsGetIconPath({
    required String icon,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(icon, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiAppmenuAppmenuItemsGetIconPathConstMeta,
        argValues: [icon],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAppmenuAppmenuItemsGetIconPathConstMeta =>
      const TaskConstMeta(
        debugName: 'get_icon_path',
        argNames: ['icon'],
      );

  @override
  DispInfo crateApiDisplayInfoGetPrimaryDisplayInfo() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_disp_info,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiDisplayInfoGetPrimaryDisplayInfoConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiDisplayInfoGetPrimaryDisplayInfoConstMeta =>
      const TaskConstMeta(
        debugName: 'get_primary_display_info',
        argNames: [],
      );

  @override
  Future<UserInfo> crateApiQuickSettingsWhoamiGetUserInfo() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_user_info,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuickSettingsWhoamiGetUserInfoConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuickSettingsWhoamiGetUserInfoConstMeta =>
      const TaskConstMeta(
        debugName: 'get_user_info',
        argNames: [],
      );

  @override
  Future<void> crateApiNotificationsInvokeNotifAction({
    required int id,
    required String actionKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(id, serializer);
          sse_encode_String(actionKey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiNotificationsInvokeNotifActionConstMeta,
        argValues: [id, actionKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiNotificationsInvokeNotifActionConstMeta =>
      const TaskConstMeta(
        debugName: 'invoke_notif_action',
        argNames: ['id', 'actionKey'],
      );

  @override
  Future<void> crateApiAppmenuAppmenuItemsLaunchApp({
    required List<String> exec,
    required bool useTerminal,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(exec, serializer);
          sse_encode_bool(useTerminal, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiAppmenuAppmenuItemsLaunchAppConstMeta,
        argValues: [exec, useTerminal],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAppmenuAppmenuItemsLaunchAppConstMeta =>
      const TaskConstMeta(
        debugName: 'launch_app',
        argNames: ['exec', 'useTerminal'],
      );

  @override
  Stream<List<BacklightInfo>>
  crateApiQuickSettingsDisplayBrightnessWatchBacklightEvent() {
    final sink = RustStreamSink<List<BacklightInfo>>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_list_backlight_info_Sse(sink, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 10,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: sse_decode_AnyhowException,
          ),
          constMeta:
              kCrateApiQuickSettingsDisplayBrightnessWatchBacklightEventConstMeta,
          argValues: [sink],
          apiImpl: this,
        ),
      ),
    );
    return sink.stream;
  }

  TaskConstMeta
  get kCrateApiQuickSettingsDisplayBrightnessWatchBacklightEventConstMeta =>
      const TaskConstMeta(
        debugName: 'watch_backlight_event',
        argNames: ['sink'],
      );

  @override
  Stream<List<BatteryInfo>> crateApiQuickSettingsBatteryWatchBatteryEvent() {
    final sink = RustStreamSink<List<BatteryInfo>>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_list_battery_info_Sse(sink, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 11,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: sse_decode_AnyhowException,
          ),
          constMeta: kCrateApiQuickSettingsBatteryWatchBatteryEventConstMeta,
          argValues: [sink],
          apiImpl: this,
        ),
      ),
    );
    return sink.stream;
  }

  TaskConstMeta get kCrateApiQuickSettingsBatteryWatchBatteryEventConstMeta =>
      const TaskConstMeta(
        debugName: 'watch_battery_event',
        argNames: ['sink'],
      );

  @override
  Stream<NotificationData> crateApiNotificationsWatchNotificationBus() {
    final sink = RustStreamSink<NotificationData>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_notification_data_Sse(sink, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 12,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData:
                sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus,
            decodeErrorData: sse_decode_AnyhowException,
          ),
          constMeta: kCrateApiNotificationsWatchNotificationBusConstMeta,
          argValues: [sink],
          apiImpl: this,
        ),
      ),
    );
    return sink.stream;
  }

  TaskConstMeta get kCrateApiNotificationsWatchNotificationBusConstMeta =>
      const TaskConstMeta(
        debugName: 'watch_notification_bus',
        argNames: ['sink'],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_NotificationDbus => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_NotificationDbus => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  NotificationDbus
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NotificationDbusImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NotificationDbus
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NotificationDbusImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NotificationDbus
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NotificationDbusImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DateTime dco_decode_Chrono_Local(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw), isUtc: false);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_string(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  NotificationDbus
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NotificationDbusImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<List<BacklightInfo>>
  dco_decode_StreamSink_list_backlight_info_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<List<BatteryInfo>> dco_decode_StreamSink_list_battery_info_Sse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<NotificationData> dco_decode_StreamSink_notification_data_Sse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AppEntry dco_decode_app_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return AppEntry(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      desc: dco_decode_String(arr[2]),
      exec: dco_decode_list_String(arr[3]),
      workingDir: dco_decode_String(arr[4]),
      runInTerminal: dco_decode_bool(arr[5]),
      icon: dco_decode_String(arr[6]),
    );
  }

  @protected
  BacklightInfo dco_decode_backlight_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BacklightInfo(
      name: dco_decode_String(arr[0]),
      brightness: dco_decode_u_16(arr[1]),
      maxBrightness: dco_decode_u_16(arr[2]),
    );
  }

  @protected
  BatteryInfo dco_decode_battery_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return BatteryInfo(
      name: dco_decode_String(arr[0]),
      capacity: dco_decode_f_32(arr[1]),
      battState: dco_decode_battery_state(arr[2]),
      timeToFullSecs: dco_decode_opt_box_autoadd_f_32(arr[3]),
      timeToEmptySecs: dco_decode_opt_box_autoadd_f_32(arr[4]),
    );
  }

  @protected
  BatteryState dco_decode_battery_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BatteryState.values[raw as int];
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  DispInfo dco_decode_disp_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DispInfo(
      name: dco_decode_String(arr[0]),
      id: dco_decode_u_32(arr[1]),
      widthPx: dco_decode_u_32(arr[2]),
      heightPx: dco_decode_u_32(arr[3]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<AppEntry> dco_decode_list_app_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_app_entry).toList();
  }

  @protected
  List<BacklightInfo> dco_decode_list_backlight_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_backlight_info).toList();
  }

  @protected
  List<BatteryInfo> dco_decode_list_battery_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_battery_info).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  NotificationData dco_decode_notification_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return NotificationData(
      id: dco_decode_u_32(arr[0]),
      appName: dco_decode_String(arr[1]),
      replacesId: dco_decode_u_32(arr[2]),
      appIcon: dco_decode_String(arr[3]),
      summary: dco_decode_String(arr[4]),
      body: dco_decode_String(arr[5]),
      actions: dco_decode_list_String(arr[6]),
      expireTimeout: dco_decode_i_32(arr[7]),
      hints: dco_decode_Map_String_String_None(arr[8]),
      addedAt: dco_decode_Chrono_Local(arr[9]),
    );
  }

  @protected
  NotificationService dco_decode_notification_service(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NotificationService(
      sink: dco_decode_StreamSink_notification_data_Sse(arr[0]),
    );
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_32(raw);
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UserInfo dco_decode_user_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UserInfo(
      fullname: dco_decode_String(arr[0]),
      username: dco_decode_String(arr[1]),
      hostname: dco_decode_String(arr[2]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  NotificationDbus
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NotificationDbusImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  NotificationDbus
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NotificationDbusImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  NotificationDbus
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NotificationDbusImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DateTime sse_decode_Chrono_Local(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  NotificationDbus
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NotificationDbusImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RustStreamSink<List<BacklightInfo>>
  sse_decode_StreamSink_list_backlight_info_Sse(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<List<BatteryInfo>> sse_decode_StreamSink_list_battery_info_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<NotificationData> sse_decode_StreamSink_notification_data_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AppEntry sse_decode_app_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_id = sse_decode_String(deserializer);
    final var_name = sse_decode_String(deserializer);
    final var_desc = sse_decode_String(deserializer);
    final var_exec = sse_decode_list_String(deserializer);
    final var_workingDir = sse_decode_String(deserializer);
    final var_runInTerminal = sse_decode_bool(deserializer);
    final var_icon = sse_decode_String(deserializer);
    return AppEntry(
      id: var_id,
      name: var_name,
      desc: var_desc,
      exec: var_exec,
      workingDir: var_workingDir,
      runInTerminal: var_runInTerminal,
      icon: var_icon,
    );
  }

  @protected
  BacklightInfo sse_decode_backlight_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_name = sse_decode_String(deserializer);
    final var_brightness = sse_decode_u_16(deserializer);
    final var_maxBrightness = sse_decode_u_16(deserializer);
    return BacklightInfo(
      name: var_name,
      brightness: var_brightness,
      maxBrightness: var_maxBrightness,
    );
  }

  @protected
  BatteryInfo sse_decode_battery_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_name = sse_decode_String(deserializer);
    final var_capacity = sse_decode_f_32(deserializer);
    final var_battState = sse_decode_battery_state(deserializer);
    final var_timeToFullSecs = sse_decode_opt_box_autoadd_f_32(deserializer);
    final var_timeToEmptySecs = sse_decode_opt_box_autoadd_f_32(deserializer);
    return BatteryInfo(
      name: var_name,
      capacity: var_capacity,
      battState: var_battState,
      timeToFullSecs: var_timeToFullSecs,
      timeToEmptySecs: var_timeToEmptySecs,
    );
  }

  @protected
  BatteryState sse_decode_battery_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_i_32(deserializer);
    return BatteryState.values[inner];
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return sse_decode_f_32(deserializer);
  }

  @protected
  DispInfo sse_decode_disp_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_name = sse_decode_String(deserializer);
    final var_id = sse_decode_u_32(deserializer);
    final var_widthPx = sse_decode_u_32(deserializer);
    final var_heightPx = sse_decode_u_32(deserializer);
    return DispInfo(
      name: var_name,
      id: var_id,
      widthPx: var_widthPx,
      heightPx: var_heightPx,
    );
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<AppEntry> sse_decode_list_app_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <AppEntry>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_app_entry(deserializer));
    }
    return ans_;
  }

  @protected
  List<BacklightInfo> sse_decode_list_backlight_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <BacklightInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_backlight_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<BatteryInfo> sse_decode_list_battery_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <BatteryInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_battery_info(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  NotificationData sse_decode_notification_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_id = sse_decode_u_32(deserializer);
    final var_appName = sse_decode_String(deserializer);
    final var_replacesId = sse_decode_u_32(deserializer);
    final var_appIcon = sse_decode_String(deserializer);
    final var_summary = sse_decode_String(deserializer);
    final var_body = sse_decode_String(deserializer);
    final var_actions = sse_decode_list_String(deserializer);
    final var_expireTimeout = sse_decode_i_32(deserializer);
    final var_hints = sse_decode_Map_String_String_None(deserializer);
    final var_addedAt = sse_decode_Chrono_Local(deserializer);
    return NotificationData(
      id: var_id,
      appName: var_appName,
      replacesId: var_replacesId,
      appIcon: var_appIcon,
      summary: var_summary,
      body: var_body,
      actions: var_actions,
      expireTimeout: var_expireTimeout,
      hints: var_hints,
      addedAt: var_addedAt,
    );
  }

  @protected
  NotificationService sse_decode_notification_service(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_sink = sse_decode_StreamSink_notification_data_Sse(deserializer);
    return NotificationService(sink: var_sink);
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return sse_decode_box_autoadd_f_32(deserializer);
    } else {
      return null;
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_String(deserializer);
    final var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UserInfo sse_decode_user_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_fullname = sse_decode_String(deserializer);
    final var_username = sse_decode_String(deserializer);
    final var_hostname = sse_decode_String(deserializer);
    return UserInfo(
      fullname: var_fullname,
      username: var_username,
      hostname: var_hostname,
    );
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
    NotificationDbus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as NotificationDbusImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
    NotificationDbus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as NotificationDbusImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
    NotificationDbus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as NotificationDbusImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void sse_encode_Chrono_Local(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
      PlatformInt64Util.from(self.microsecondsSinceEpoch),
      serializer,
    );
  }

  @protected
  void sse_encode_Map_String_String_None(
    Map<String, String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNotificationDbus(
    NotificationDbus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as NotificationDbusImpl).frbInternalSseEncode(),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_list_backlight_info_Sse(
    RustStreamSink<List<BacklightInfo>> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_backlight_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_list_battery_info_Sse(
    RustStreamSink<List<BatteryInfo>> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_battery_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_notification_data_Sse(
    RustStreamSink<NotificationData> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_notification_data,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_app_entry(AppEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.desc, serializer);
    sse_encode_list_String(self.exec, serializer);
    sse_encode_String(self.workingDir, serializer);
    sse_encode_bool(self.runInTerminal, serializer);
    sse_encode_String(self.icon, serializer);
  }

  @protected
  void sse_encode_backlight_info(BacklightInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_u_16(self.brightness, serializer);
    sse_encode_u_16(self.maxBrightness, serializer);
  }

  @protected
  void sse_encode_battery_info(BatteryInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_f_32(self.capacity, serializer);
    sse_encode_battery_state(self.battState, serializer);
    sse_encode_opt_box_autoadd_f_32(self.timeToFullSecs, serializer);
    sse_encode_opt_box_autoadd_f_32(self.timeToEmptySecs, serializer);
  }

  @protected
  void sse_encode_battery_state(BatteryState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self, serializer);
  }

  @protected
  void sse_encode_disp_info(DispInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_32(self.widthPx, serializer);
    sse_encode_u_32(self.heightPx, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_app_entry(
    List<AppEntry> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_app_entry(item, serializer);
    }
  }

  @protected
  void sse_encode_list_backlight_info(
    List<BacklightInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_backlight_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_battery_info(
    List<BatteryInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_battery_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_notification_data(
    NotificationData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.appName, serializer);
    sse_encode_u_32(self.replacesId, serializer);
    sse_encode_String(self.appIcon, serializer);
    sse_encode_String(self.summary, serializer);
    sse_encode_String(self.body, serializer);
    sse_encode_list_String(self.actions, serializer);
    sse_encode_i_32(self.expireTimeout, serializer);
    sse_encode_Map_String_String_None(self.hints, serializer);
    sse_encode_Chrono_Local(self.addedAt, serializer);
  }

  @protected
  void sse_encode_notification_service(
    NotificationService self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_StreamSink_notification_data_Sse(self.sink, serializer);
  }

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_32(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_user_info(UserInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.fullname, serializer);
    sse_encode_String(self.username, serializer);
    sse_encode_String(self.hostname, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class NotificationDbusImpl extends RustOpaque implements NotificationDbus {
  // Not to be used by end users
  NotificationDbusImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NotificationDbusImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final RustArcStaticData _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_NotificationDbus,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_NotificationDbus,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_NotificationDbusPtr,
  );

  NotificationService get service => RustLib.instance.api
      .crateApiNotificationsNotificationDbusAutoAccessorGetService(
        that: this,
      );

  set service(NotificationService service) => RustLib.instance.api
      .crateApiNotificationsNotificationDbusAutoAccessorSetService(
        that: this,
        service: service,
      );
}
