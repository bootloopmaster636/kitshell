// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::wm_interface::base::WmInterface;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.11.1";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -793992137;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__quick_settings__display_brightness__change_brightness_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "change_brightness",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            let api_value = <u16>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::quick_settings::display_brightness::change_brightness(
                                api_name, api_value,
                            )
                            .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__wm_interface__base__detect_current_wm_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "detect_current_wm",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::wm_interface::base::detect_current_wm()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__mpris__mpris__dispatch_player_action_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dispatch_player_action",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_action =
                <crate::api::mpris::mpris::PlayerOperations>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::mpris::mpris::dispatch_player_action(api_action).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__appmenu__appmenu_items__get_appmenu_items_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_appmenu_items",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_locale = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::appmenu::appmenu_items::get_appmenu_items(&api_locale)
                                .await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__display_info__get_display_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_display_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::display_info::get_display_info())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__appmenu__appmenu_items__get_icon_path_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_icon_path",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_icon = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::appmenu::appmenu_items::get_icon_path(&api_icon).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quick_settings__whoami__get_user_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_user_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::quick_settings::whoami::get_user_info())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__notifications__invoke_notif_action_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "invoke_notif_action",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <u32>::sse_decode(&mut deserializer);
            let api_action_key = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::notifications::invoke_notif_action(api_id, api_action_key)
                                .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__appmenu__appmenu_items__launch_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "launch_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_exec = <Vec<String>>::sse_decode(&mut deserializer);
            let api_use_terminal = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::appmenu::appmenu_items::launch_app(
                                api_exec,
                                api_use_terminal,
                            )
                            .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__mpris__cava__listen_to_cava_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "listen_to_cava",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                crate::api::mpris::cava::CavaState,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::mpris::cava::listen_to_cava(api_sink)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__wm_interface__niri__niri_close_window_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "niri_close_window",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_window_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok =
                            crate::api::wm_interface::niri::Niri::close_window(api_window_id)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__wm_interface__niri__niri_focus_window_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "niri_focus_window",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_window_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok =
                            crate::api::wm_interface::niri::Niri::focus_window(api_window_id)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__wm_interface__niri__niri_switch_workspace_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "niri_switch_workspace",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_workspace_id = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::wm_interface::niri::Niri::switch_workspace(
                            api_workspace_id,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__wm_interface__niri__niri_watch_launchbar_events_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "niri_watch_launchbar_events",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                crate::api::wm_interface::base::WmState,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok =
                            crate::api::wm_interface::niri::Niri::watch_launchbar_events(api_sink)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__quick_settings__display_brightness__watch_backlight_event_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "watch_backlight_event",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                Vec<crate::api::quick_settings::display_brightness::BacklightInfo>,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok =
                            crate::api::quick_settings::display_brightness::watch_backlight_event(
                                api_sink,
                            )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__quick_settings__battery__watch_battery_event_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "watch_battery_event",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                Vec<crate::api::quick_settings::battery::BatteryInfo>,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok =
                            crate::api::quick_settings::battery::watch_battery_event(api_sink)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__mpris__mpris__watch_media_player_events_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "watch_media_player_events",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                Option<crate::api::mpris::mpris::TrackProgress>,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::mpris::mpris::watch_media_player_events(api_sink).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__notifications__watch_notification_bus_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "watch_notification_bus",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                crate::api::notifications::NotificationData,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok =
                            crate::api::notifications::watch_notification_bus(api_sink).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for chrono::Duration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::Duration::microseconds(inner);
    }
}

impl SseDecode for chrono::DateTime<chrono::Local> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::DateTime::<chrono::Local>::from(
            chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(
                chrono::DateTime::from_timestamp_micros(inner)
                    .expect("invalid or out-of-range datetime")
                    .naive_utc(),
                chrono::Utc,
            ),
        );
    }
}

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for StreamSink<crate::api::mpris::cava::CavaState, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<
        Vec<crate::api::quick_settings::display_brightness::BacklightInfo>,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<
        Vec<crate::api::quick_settings::battery::BatteryInfo>,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<
        crate::api::notifications::NotificationData,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<
        Option<crate::api::mpris::mpris::TrackProgress>,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<
        crate::api::wm_interface::base::WmState,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::appmenu::appmenu_items::AppEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_appId = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_desc = <String>::sse_decode(deserializer);
        let mut var_exec = <Vec<String>>::sse_decode(deserializer);
        let mut var_workingDir = <String>::sse_decode(deserializer);
        let mut var_runInTerminal = <bool>::sse_decode(deserializer);
        let mut var_icon = <String>::sse_decode(deserializer);
        return crate::api::appmenu::appmenu_items::AppEntry {
            id: var_id,
            app_id: var_appId,
            name: var_name,
            desc: var_desc,
            exec: var_exec,
            working_dir: var_workingDir,
            run_in_terminal: var_runInTerminal,
            icon: var_icon,
        };
    }
}

impl SseDecode for crate::api::quick_settings::display_brightness::BacklightInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_brightness = <u16>::sse_decode(deserializer);
        let mut var_maxBrightness = <u16>::sse_decode(deserializer);
        return crate::api::quick_settings::display_brightness::BacklightInfo {
            name: var_name,
            brightness: var_brightness,
            max_brightness: var_maxBrightness,
        };
    }
}

impl SseDecode for crate::api::quick_settings::battery::BatteryInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_capacity = <f32>::sse_decode(deserializer);
        let mut var_battState =
            <crate::api::quick_settings::battery::BatteryState>::sse_decode(deserializer);
        let mut var_timeToFullSecs = <Option<f32>>::sse_decode(deserializer);
        let mut var_timeToEmptySecs = <Option<f32>>::sse_decode(deserializer);
        return crate::api::quick_settings::battery::BatteryInfo {
            name: var_name,
            capacity: var_capacity,
            batt_state: var_battState,
            time_to_full_secs: var_timeToFullSecs,
            time_to_empty_secs: var_timeToEmptySecs,
        };
    }
}

impl SseDecode for crate::api::quick_settings::battery::BatteryState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::quick_settings::battery::BatteryState::Unknown,
            1 => crate::api::quick_settings::battery::BatteryState::Charging,
            2 => crate::api::quick_settings::battery::BatteryState::Discharging,
            3 => crate::api::quick_settings::battery::BatteryState::Empty,
            4 => crate::api::quick_settings::battery::BatteryState::Full,
            _ => unreachable!("Invalid variant for BatteryState: {}", inner),
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::mpris::cava::CavaState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_data = <[u8; 32]>::sse_decode(deserializer);
        let mut var_barCount = <u16>::sse_decode(deserializer);
        let mut var_cavaPid = <u32>::sse_decode(deserializer);
        return crate::api::mpris::cava::CavaState {
            data: var_data,
            bar_count: var_barCount,
            cava_pid: var_cavaPid,
        };
    }
}

impl SseDecode for crate::api::display_info::DispInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_idx = <u32>::sse_decode(deserializer);
        let mut var_widthPx = <u32>::sse_decode(deserializer);
        let mut var_heightPx = <u32>::sse_decode(deserializer);
        let mut var_scale = <f32>::sse_decode(deserializer);
        return crate::api::display_info::DispInfo {
            name: var_name,
            idx: var_idx,
            width_px: var_widthPx,
            height_px: var_heightPx,
            scale: var_scale,
        };
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::wm_interface::base::LaunchbarItemState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_windowId = <u64>::sse_decode(deserializer);
        let mut var_windowTitle = <Option<String>>::sse_decode(deserializer);
        let mut var_appId = <Option<String>>::sse_decode(deserializer);
        let mut var_workspaceId = <Option<u64>>::sse_decode(deserializer);
        let mut var_processId = <Option<i32>>::sse_decode(deserializer);
        let mut var_isFocused = <bool>::sse_decode(deserializer);
        return crate::api::wm_interface::base::LaunchbarItemState {
            window_id: var_windowId,
            window_title: var_windowTitle,
            app_id: var_appId,
            workspace_id: var_workspaceId,
            process_id: var_processId,
            is_focused: var_isFocused,
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::appmenu::appmenu_items::AppEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::appmenu::appmenu_items::AppEntry>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::quick_settings::display_brightness::BacklightInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::quick_settings::display_brightness::BacklightInfo>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::quick_settings::battery::BatteryInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::quick_settings::battery::BatteryInfo>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::display_info::DispInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::display_info::DispInfo>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::wm_interface::base::LaunchbarItemState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::wm_interface::base::LaunchbarItemState>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::wm_interface::base::WorkspaceItemState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::wm_interface::base::WorkspaceItemState>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::wm_interface::base::WorkspaceState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::wm_interface::base::WorkspaceState>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for mpris::LoopStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => mpris::LoopStatus::None,
            1 => mpris::LoopStatus::Track,
            2 => mpris::LoopStatus::Playlist,
            _ => unreachable!("Invalid variant for LoopStatus: {}", inner),
        };
    }
}

impl SseDecode for crate::api::wm_interface::niri::Niri {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::wm_interface::niri::Niri {};
    }
}

impl SseDecode for crate::api::notifications::NotificationData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u32>::sse_decode(deserializer);
        let mut var_appName = <String>::sse_decode(deserializer);
        let mut var_replacesId = <u32>::sse_decode(deserializer);
        let mut var_appIcon = <String>::sse_decode(deserializer);
        let mut var_summary = <String>::sse_decode(deserializer);
        let mut var_body = <String>::sse_decode(deserializer);
        let mut var_actions = <Vec<String>>::sse_decode(deserializer);
        let mut var_expireTimeout = <i32>::sse_decode(deserializer);
        let mut var_hints = <std::collections::HashMap<String, String>>::sse_decode(deserializer);
        let mut var_addedAt = <chrono::DateTime<chrono::Local>>::sse_decode(deserializer);
        return crate::api::notifications::NotificationData {
            id: var_id,
            app_name: var_appName,
            replaces_id: var_replacesId,
            app_icon: var_appIcon,
            summary: var_summary,
            body: var_body,
            actions: var_actions,
            expire_timeout: var_expireTimeout,
            hints: var_hints,
            added_at: var_addedAt,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::Duration> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::Duration>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::mpris::mpris::TrackProgress> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::mpris::mpris::TrackProgress>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<String>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for mpris::PlaybackStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => mpris::PlaybackStatus::Playing,
            1 => mpris::PlaybackStatus::Paused,
            2 => mpris::PlaybackStatus::Stopped,
            _ => unreachable!("Invalid variant for PlaybackStatus: {}", inner),
        };
    }
}

impl SseDecode for crate::api::mpris::mpris::PlayerInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_friendlyName = <String>::sse_decode(deserializer);
        let mut var_desktopEntry = <Option<String>>::sse_decode(deserializer);
        let mut var_canBeControlled = <bool>::sse_decode(deserializer);
        let mut var_canGoPrev = <bool>::sse_decode(deserializer);
        let mut var_canGoNext = <bool>::sse_decode(deserializer);
        let mut var_canPlay = <bool>::sse_decode(deserializer);
        let mut var_canPause = <bool>::sse_decode(deserializer);
        let mut var_canStop = <bool>::sse_decode(deserializer);
        return crate::api::mpris::mpris::PlayerInfo {
            friendly_name: var_friendlyName,
            desktop_entry: var_desktopEntry,
            can_be_controlled: var_canBeControlled,
            can_go_prev: var_canGoPrev,
            can_go_next: var_canGoNext,
            can_play: var_canPlay,
            can_pause: var_canPause,
            can_stop: var_canStop,
        };
    }
}

impl SseDecode for crate::api::mpris::mpris::PlayerOperations {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::mpris::mpris::PlayerOperations::Play;
            }
            1 => {
                return crate::api::mpris::mpris::PlayerOperations::Pause;
            }
            2 => {
                return crate::api::mpris::mpris::PlayerOperations::TogglePlayPause;
            }
            3 => {
                return crate::api::mpris::mpris::PlayerOperations::NextTrack;
            }
            4 => {
                return crate::api::mpris::mpris::PlayerOperations::PrevTrack;
            }
            5 => {
                return crate::api::mpris::mpris::PlayerOperations::ToggleShuffle;
            }
            6 => {
                return crate::api::mpris::mpris::PlayerOperations::SetLoop;
            }
            7 => {
                let mut var_offsetUs = <i64>::sse_decode(deserializer);
                return crate::api::mpris::mpris::PlayerOperations::Seek {
                    offset_us: var_offsetUs,
                };
            }
            8 => {
                return crate::api::mpris::mpris::PlayerOperations::Open;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::mpris::mpris::TrackMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_title = <Option<String>>::sse_decode(deserializer);
        let mut var_artists = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_album = <Option<String>>::sse_decode(deserializer);
        let mut var_artUrl = <Option<String>>::sse_decode(deserializer);
        let mut var_trackId = <Option<String>>::sse_decode(deserializer);
        let mut var_trackLength = <Option<chrono::Duration>>::sse_decode(deserializer);
        return crate::api::mpris::mpris::TrackMetadata {
            title: var_title,
            artists: var_artists,
            album: var_album,
            art_url: var_artUrl,
            track_id: var_trackId,
            track_length: var_trackLength,
        };
    }
}

impl SseDecode for crate::api::mpris::mpris::TrackProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_metadata = <crate::api::mpris::mpris::TrackMetadata>::sse_decode(deserializer);
        let mut var_playbackStatus = <mpris::PlaybackStatus>::sse_decode(deserializer);
        let mut var_shuffleEnabled = <bool>::sse_decode(deserializer);
        let mut var_loopStatus = <mpris::LoopStatus>::sse_decode(deserializer);
        let mut var_progressNormalized = <Option<f64>>::sse_decode(deserializer);
        let mut var_progressDuration = <chrono::Duration>::sse_decode(deserializer);
        let mut var_player = <crate::api::mpris::mpris::PlayerInfo>::sse_decode(deserializer);
        return crate::api::mpris::mpris::TrackProgress {
            metadata: var_metadata,
            playback_status: var_playbackStatus,
            shuffle_enabled: var_shuffleEnabled,
            loop_status: var_loopStatus,
            progress_normalized: var_progressNormalized,
            progress_duration: var_progressDuration,
            player: var_player,
        };
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for [u8; 32] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::api::quick_settings::whoami::UserInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fullname = <String>::sse_decode(deserializer);
        let mut var_username = <String>::sse_decode(deserializer);
        let mut var_hostname = <String>::sse_decode(deserializer);
        return crate::api::quick_settings::whoami::UserInfo {
            fullname: var_fullname,
            username: var_username,
            hostname: var_hostname,
        };
    }
}

impl SseDecode for crate::api::wm_interface::base::WindowManager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::wm_interface::base::WindowManager::Niri,
            1 => crate::api::wm_interface::base::WindowManager::Unsupported,
            _ => unreachable!("Invalid variant for WindowManager: {}", inner),
        };
    }
}

impl SseDecode for crate::api::wm_interface::base::WmState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_launchbar =
            <Vec<crate::api::wm_interface::base::LaunchbarItemState>>::sse_decode(deserializer);
        let mut var_workspaces =
            <Vec<crate::api::wm_interface::base::WorkspaceState>>::sse_decode(deserializer);
        return crate::api::wm_interface::base::WmState {
            launchbar: var_launchbar,
            workspaces: var_workspaces,
        };
    }
}

impl SseDecode for crate::api::wm_interface::base::WorkspaceItemState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u64>::sse_decode(deserializer);
        let mut var_idx = <u8>::sse_decode(deserializer);
        let mut var_name = <Option<String>>::sse_decode(deserializer);
        let mut var_isFocused = <bool>::sse_decode(deserializer);
        let mut var_isActive = <bool>::sse_decode(deserializer);
        return crate::api::wm_interface::base::WorkspaceItemState {
            id: var_id,
            idx: var_idx,
            name: var_name,
            is_focused: var_isFocused,
            is_active: var_isActive,
        };
    }
}

impl SseDecode for crate::api::wm_interface::base::WorkspaceState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_items =
            <Vec<crate::api::wm_interface::base::WorkspaceItemState>>::sse_decode(deserializer);
        let mut var_output = <Option<String>>::sse_decode(deserializer);
        let mut var_hasWorkspaceFocused = <bool>::sse_decode(deserializer);
        return crate::api::wm_interface::base::WorkspaceState {
            items: var_items,
            output: var_output,
            has_workspace_focused: var_hasWorkspaceFocused,
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        5 => wire__crate__api__quick_settings__display_brightness__change_brightness_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        6 => wire__crate__api__wm_interface__base__detect_current_wm_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        7 => wire__crate__api__mpris__mpris__dispatch_player_action_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        8 => wire__crate__api__appmenu__appmenu_items__get_appmenu_items_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        9 => {
            wire__crate__api__display_info__get_display_info_impl(port, ptr, rust_vec_len, data_len)
        }
        10 => wire__crate__api__appmenu__appmenu_items__get_icon_path_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        11 => wire__crate__api__quick_settings__whoami__get_user_info_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        12 => wire__crate__api__notifications__invoke_notif_action_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        13 => wire__crate__api__appmenu__appmenu_items__launch_app_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        14 => wire__crate__api__mpris__cava__listen_to_cava_impl(port, ptr, rust_vec_len, data_len),
        15 => wire__crate__api__wm_interface__niri__niri_close_window_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        16 => wire__crate__api__wm_interface__niri__niri_focus_window_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        17 => wire__crate__api__wm_interface__niri__niri_switch_workspace_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        18 => wire__crate__api__wm_interface__niri__niri_watch_launchbar_events_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        19 => wire__crate__api__quick_settings__display_brightness__watch_backlight_event_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        20 => wire__crate__api__quick_settings__battery__watch_battery_event_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        21 => wire__crate__api__mpris__mpris__watch_media_player_events_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        22 => wire__crate__api__notifications__watch_notification_bus_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::appmenu::appmenu_items::AppEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.app_id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.desc.into_into_dart().into_dart(),
            self.exec.into_into_dart().into_dart(),
            self.working_dir.into_into_dart().into_dart(),
            self.run_in_terminal.into_into_dart().into_dart(),
            self.icon.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::appmenu::appmenu_items::AppEntry
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::appmenu::appmenu_items::AppEntry>
    for crate::api::appmenu::appmenu_items::AppEntry
{
    fn into_into_dart(self) -> crate::api::appmenu::appmenu_items::AppEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::quick_settings::display_brightness::BacklightInfo
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.brightness.into_into_dart().into_dart(),
            self.max_brightness.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::quick_settings::display_brightness::BacklightInfo
{
}
impl
    flutter_rust_bridge::IntoIntoDart<crate::api::quick_settings::display_brightness::BacklightInfo>
    for crate::api::quick_settings::display_brightness::BacklightInfo
{
    fn into_into_dart(self) -> crate::api::quick_settings::display_brightness::BacklightInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::quick_settings::battery::BatteryInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.capacity.into_into_dart().into_dart(),
            self.batt_state.into_into_dart().into_dart(),
            self.time_to_full_secs.into_into_dart().into_dart(),
            self.time_to_empty_secs.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::quick_settings::battery::BatteryInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::quick_settings::battery::BatteryInfo>
    for crate::api::quick_settings::battery::BatteryInfo
{
    fn into_into_dart(self) -> crate::api::quick_settings::battery::BatteryInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::quick_settings::battery::BatteryState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Unknown => 0.into_dart(),
            Self::Charging => 1.into_dart(),
            Self::Discharging => 2.into_dart(),
            Self::Empty => 3.into_dart(),
            Self::Full => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::quick_settings::battery::BatteryState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::quick_settings::battery::BatteryState>
    for crate::api::quick_settings::battery::BatteryState
{
    fn into_into_dart(self) -> crate::api::quick_settings::battery::BatteryState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::mpris::cava::CavaState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.data.into_into_dart().into_dart(),
            self.bar_count.into_into_dart().into_dart(),
            self.cava_pid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::mpris::cava::CavaState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::mpris::cava::CavaState>
    for crate::api::mpris::cava::CavaState
{
    fn into_into_dart(self) -> crate::api::mpris::cava::CavaState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::display_info::DispInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.idx.into_into_dart().into_dart(),
            self.width_px.into_into_dart().into_dart(),
            self.height_px.into_into_dart().into_dart(),
            self.scale.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::display_info::DispInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::display_info::DispInfo>
    for crate::api::display_info::DispInfo
{
    fn into_into_dart(self) -> crate::api::display_info::DispInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::wm_interface::base::LaunchbarItemState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.window_id.into_into_dart().into_dart(),
            self.window_title.into_into_dart().into_dart(),
            self.app_id.into_into_dart().into_dart(),
            self.workspace_id.into_into_dart().into_dart(),
            self.process_id.into_into_dart().into_dart(),
            self.is_focused.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::wm_interface::base::LaunchbarItemState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::wm_interface::base::LaunchbarItemState>
    for crate::api::wm_interface::base::LaunchbarItemState
{
    fn into_into_dart(self) -> crate::api::wm_interface::base::LaunchbarItemState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<mpris::LoopStatus> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            mpris::LoopStatus::None => 0.into_dart(),
            mpris::LoopStatus::Track => 1.into_dart(),
            mpris::LoopStatus::Playlist => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<mpris::LoopStatus> {}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<mpris::LoopStatus>> for mpris::LoopStatus {
    fn into_into_dart(self) -> FrbWrapper<mpris::LoopStatus> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::wm_interface::niri::Niri {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::wm_interface::niri::Niri
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::wm_interface::niri::Niri>
    for crate::api::wm_interface::niri::Niri
{
    fn into_into_dart(self) -> crate::api::wm_interface::niri::Niri {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::notifications::NotificationData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.app_name.into_into_dart().into_dart(),
            self.replaces_id.into_into_dart().into_dart(),
            self.app_icon.into_into_dart().into_dart(),
            self.summary.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
            self.actions.into_into_dart().into_dart(),
            self.expire_timeout.into_into_dart().into_dart(),
            self.hints.into_into_dart().into_dart(),
            self.added_at.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::notifications::NotificationData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::notifications::NotificationData>
    for crate::api::notifications::NotificationData
{
    fn into_into_dart(self) -> crate::api::notifications::NotificationData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<mpris::PlaybackStatus> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            mpris::PlaybackStatus::Playing => 0.into_dart(),
            mpris::PlaybackStatus::Paused => 1.into_dart(),
            mpris::PlaybackStatus::Stopped => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<mpris::PlaybackStatus>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<mpris::PlaybackStatus>>
    for mpris::PlaybackStatus
{
    fn into_into_dart(self) -> FrbWrapper<mpris::PlaybackStatus> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::mpris::mpris::PlayerInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.friendly_name.into_into_dart().into_dart(),
            self.desktop_entry.into_into_dart().into_dart(),
            self.can_be_controlled.into_into_dart().into_dart(),
            self.can_go_prev.into_into_dart().into_dart(),
            self.can_go_next.into_into_dart().into_dart(),
            self.can_play.into_into_dart().into_dart(),
            self.can_pause.into_into_dart().into_dart(),
            self.can_stop.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::mpris::mpris::PlayerInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::mpris::mpris::PlayerInfo>
    for crate::api::mpris::mpris::PlayerInfo
{
    fn into_into_dart(self) -> crate::api::mpris::mpris::PlayerInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::mpris::mpris::PlayerOperations {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::mpris::mpris::PlayerOperations::Play => [0.into_dart()].into_dart(),
            crate::api::mpris::mpris::PlayerOperations::Pause => [1.into_dart()].into_dart(),
            crate::api::mpris::mpris::PlayerOperations::TogglePlayPause => {
                [2.into_dart()].into_dart()
            }
            crate::api::mpris::mpris::PlayerOperations::NextTrack => [3.into_dart()].into_dart(),
            crate::api::mpris::mpris::PlayerOperations::PrevTrack => [4.into_dart()].into_dart(),
            crate::api::mpris::mpris::PlayerOperations::ToggleShuffle => {
                [5.into_dart()].into_dart()
            }
            crate::api::mpris::mpris::PlayerOperations::SetLoop => [6.into_dart()].into_dart(),
            crate::api::mpris::mpris::PlayerOperations::Seek { offset_us } => {
                [7.into_dart(), offset_us.into_into_dart().into_dart()].into_dart()
            }
            crate::api::mpris::mpris::PlayerOperations::Open => [8.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::mpris::mpris::PlayerOperations
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::mpris::mpris::PlayerOperations>
    for crate::api::mpris::mpris::PlayerOperations
{
    fn into_into_dart(self) -> crate::api::mpris::mpris::PlayerOperations {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::mpris::mpris::TrackMetadata {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.title.into_into_dart().into_dart(),
            self.artists.into_into_dart().into_dart(),
            self.album.into_into_dart().into_dart(),
            self.art_url.into_into_dart().into_dart(),
            self.track_id.into_into_dart().into_dart(),
            self.track_length.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::mpris::mpris::TrackMetadata
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::mpris::mpris::TrackMetadata>
    for crate::api::mpris::mpris::TrackMetadata
{
    fn into_into_dart(self) -> crate::api::mpris::mpris::TrackMetadata {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::mpris::mpris::TrackProgress {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.metadata.into_into_dart().into_dart(),
            self.playback_status.into_into_dart().into_dart(),
            self.shuffle_enabled.into_into_dart().into_dart(),
            self.loop_status.into_into_dart().into_dart(),
            self.progress_normalized.into_into_dart().into_dart(),
            self.progress_duration.into_into_dart().into_dart(),
            self.player.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::mpris::mpris::TrackProgress
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::mpris::mpris::TrackProgress>
    for crate::api::mpris::mpris::TrackProgress
{
    fn into_into_dart(self) -> crate::api::mpris::mpris::TrackProgress {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::quick_settings::whoami::UserInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.fullname.into_into_dart().into_dart(),
            self.username.into_into_dart().into_dart(),
            self.hostname.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::quick_settings::whoami::UserInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::quick_settings::whoami::UserInfo>
    for crate::api::quick_settings::whoami::UserInfo
{
    fn into_into_dart(self) -> crate::api::quick_settings::whoami::UserInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::wm_interface::base::WindowManager {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Niri => 0.into_dart(),
            Self::Unsupported => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::wm_interface::base::WindowManager
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::wm_interface::base::WindowManager>
    for crate::api::wm_interface::base::WindowManager
{
    fn into_into_dart(self) -> crate::api::wm_interface::base::WindowManager {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::wm_interface::base::WmState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.launchbar.into_into_dart().into_dart(),
            self.workspaces.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::wm_interface::base::WmState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::wm_interface::base::WmState>
    for crate::api::wm_interface::base::WmState
{
    fn into_into_dart(self) -> crate::api::wm_interface::base::WmState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::wm_interface::base::WorkspaceItemState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.idx.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.is_focused.into_into_dart().into_dart(),
            self.is_active.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::wm_interface::base::WorkspaceItemState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::wm_interface::base::WorkspaceItemState>
    for crate::api::wm_interface::base::WorkspaceItemState
{
    fn into_into_dart(self) -> crate::api::wm_interface::base::WorkspaceItemState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::wm_interface::base::WorkspaceState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.items.into_into_dart().into_dart(),
            self.output.into_into_dart().into_dart(),
            self.has_workspace_focused.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::wm_interface::base::WorkspaceState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::wm_interface::base::WorkspaceState>
    for crate::api::wm_interface::base::WorkspaceState
{
    fn into_into_dart(self) -> crate::api::wm_interface::base::WorkspaceState {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for chrono::Duration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(
            self.num_microseconds()
                .expect("cannot get microseconds from time"),
            serializer,
        );
    }
}

impl SseEncode for chrono::DateTime<chrono::Local> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.timestamp_micros(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for StreamSink<crate::api::mpris::cava::CavaState, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<
        Vec<crate::api::quick_settings::display_brightness::BacklightInfo>,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<
        Vec<crate::api::quick_settings::battery::BatteryInfo>,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<
        crate::api::notifications::NotificationData,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<
        Option<crate::api::mpris::mpris::TrackProgress>,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<
        crate::api::wm_interface::base::WmState,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::appmenu::appmenu_items::AppEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.app_id, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.desc, serializer);
        <Vec<String>>::sse_encode(self.exec, serializer);
        <String>::sse_encode(self.working_dir, serializer);
        <bool>::sse_encode(self.run_in_terminal, serializer);
        <String>::sse_encode(self.icon, serializer);
    }
}

impl SseEncode for crate::api::quick_settings::display_brightness::BacklightInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <u16>::sse_encode(self.brightness, serializer);
        <u16>::sse_encode(self.max_brightness, serializer);
    }
}

impl SseEncode for crate::api::quick_settings::battery::BatteryInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <f32>::sse_encode(self.capacity, serializer);
        <crate::api::quick_settings::battery::BatteryState>::sse_encode(
            self.batt_state,
            serializer,
        );
        <Option<f32>>::sse_encode(self.time_to_full_secs, serializer);
        <Option<f32>>::sse_encode(self.time_to_empty_secs, serializer);
    }
}

impl SseEncode for crate::api::quick_settings::battery::BatteryState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::quick_settings::battery::BatteryState::Unknown => 0,
                crate::api::quick_settings::battery::BatteryState::Charging => 1,
                crate::api::quick_settings::battery::BatteryState::Discharging => 2,
                crate::api::quick_settings::battery::BatteryState::Empty => 3,
                crate::api::quick_settings::battery::BatteryState::Full => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::mpris::cava::CavaState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 32]>::sse_encode(self.data, serializer);
        <u16>::sse_encode(self.bar_count, serializer);
        <u32>::sse_encode(self.cava_pid, serializer);
    }
}

impl SseEncode for crate::api::display_info::DispInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <u32>::sse_encode(self.idx, serializer);
        <u32>::sse_encode(self.width_px, serializer);
        <u32>::sse_encode(self.height_px, serializer);
        <f32>::sse_encode(self.scale, serializer);
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::wm_interface::base::LaunchbarItemState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.window_id, serializer);
        <Option<String>>::sse_encode(self.window_title, serializer);
        <Option<String>>::sse_encode(self.app_id, serializer);
        <Option<u64>>::sse_encode(self.workspace_id, serializer);
        <Option<i32>>::sse_encode(self.process_id, serializer);
        <bool>::sse_encode(self.is_focused, serializer);
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::appmenu::appmenu_items::AppEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::appmenu::appmenu_items::AppEntry>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::quick_settings::display_brightness::BacklightInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::quick_settings::display_brightness::BacklightInfo>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::quick_settings::battery::BatteryInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::quick_settings::battery::BatteryInfo>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::display_info::DispInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::display_info::DispInfo>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::wm_interface::base::LaunchbarItemState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::wm_interface::base::LaunchbarItemState>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::wm_interface::base::WorkspaceItemState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::wm_interface::base::WorkspaceItemState>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::wm_interface::base::WorkspaceState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::wm_interface::base::WorkspaceState>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for mpris::LoopStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                mpris::LoopStatus::None => 0,
                mpris::LoopStatus::Track => 1,
                mpris::LoopStatus::Playlist => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::wm_interface::niri::Niri {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::notifications::NotificationData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.app_name, serializer);
        <u32>::sse_encode(self.replaces_id, serializer);
        <String>::sse_encode(self.app_icon, serializer);
        <String>::sse_encode(self.summary, serializer);
        <String>::sse_encode(self.body, serializer);
        <Vec<String>>::sse_encode(self.actions, serializer);
        <i32>::sse_encode(self.expire_timeout, serializer);
        <std::collections::HashMap<String, String>>::sse_encode(self.hints, serializer);
        <chrono::DateTime<chrono::Local>>::sse_encode(self.added_at, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::Duration> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::Duration>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::mpris::mpris::TrackProgress> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::mpris::mpris::TrackProgress>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for mpris::PlaybackStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                mpris::PlaybackStatus::Playing => 0,
                mpris::PlaybackStatus::Paused => 1,
                mpris::PlaybackStatus::Stopped => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::mpris::mpris::PlayerInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.friendly_name, serializer);
        <Option<String>>::sse_encode(self.desktop_entry, serializer);
        <bool>::sse_encode(self.can_be_controlled, serializer);
        <bool>::sse_encode(self.can_go_prev, serializer);
        <bool>::sse_encode(self.can_go_next, serializer);
        <bool>::sse_encode(self.can_play, serializer);
        <bool>::sse_encode(self.can_pause, serializer);
        <bool>::sse_encode(self.can_stop, serializer);
    }
}

impl SseEncode for crate::api::mpris::mpris::PlayerOperations {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::mpris::mpris::PlayerOperations::Play => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::mpris::mpris::PlayerOperations::Pause => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::mpris::mpris::PlayerOperations::TogglePlayPause => {
                <i32>::sse_encode(2, serializer);
            }
            crate::api::mpris::mpris::PlayerOperations::NextTrack => {
                <i32>::sse_encode(3, serializer);
            }
            crate::api::mpris::mpris::PlayerOperations::PrevTrack => {
                <i32>::sse_encode(4, serializer);
            }
            crate::api::mpris::mpris::PlayerOperations::ToggleShuffle => {
                <i32>::sse_encode(5, serializer);
            }
            crate::api::mpris::mpris::PlayerOperations::SetLoop => {
                <i32>::sse_encode(6, serializer);
            }
            crate::api::mpris::mpris::PlayerOperations::Seek { offset_us } => {
                <i32>::sse_encode(7, serializer);
                <i64>::sse_encode(offset_us, serializer);
            }
            crate::api::mpris::mpris::PlayerOperations::Open => {
                <i32>::sse_encode(8, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::mpris::mpris::TrackMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.title, serializer);
        <Option<Vec<String>>>::sse_encode(self.artists, serializer);
        <Option<String>>::sse_encode(self.album, serializer);
        <Option<String>>::sse_encode(self.art_url, serializer);
        <Option<String>>::sse_encode(self.track_id, serializer);
        <Option<chrono::Duration>>::sse_encode(self.track_length, serializer);
    }
}

impl SseEncode for crate::api::mpris::mpris::TrackProgress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::mpris::mpris::TrackMetadata>::sse_encode(self.metadata, serializer);
        <mpris::PlaybackStatus>::sse_encode(self.playback_status, serializer);
        <bool>::sse_encode(self.shuffle_enabled, serializer);
        <mpris::LoopStatus>::sse_encode(self.loop_status, serializer);
        <Option<f64>>::sse_encode(self.progress_normalized, serializer);
        <chrono::Duration>::sse_encode(self.progress_duration, serializer);
        <crate::api::mpris::mpris::PlayerInfo>::sse_encode(self.player, serializer);
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for [u8; 32] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::quick_settings::whoami::UserInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.fullname, serializer);
        <String>::sse_encode(self.username, serializer);
        <String>::sse_encode(self.hostname, serializer);
    }
}

impl SseEncode for crate::api::wm_interface::base::WindowManager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::wm_interface::base::WindowManager::Niri => 0,
                crate::api::wm_interface::base::WindowManager::Unsupported => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::wm_interface::base::WmState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::wm_interface::base::LaunchbarItemState>>::sse_encode(
            self.launchbar,
            serializer,
        );
        <Vec<crate::api::wm_interface::base::WorkspaceState>>::sse_encode(
            self.workspaces,
            serializer,
        );
    }
}

impl SseEncode for crate::api::wm_interface::base::WorkspaceItemState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.id, serializer);
        <u8>::sse_encode(self.idx, serializer);
        <Option<String>>::sse_encode(self.name, serializer);
        <bool>::sse_encode(self.is_focused, serializer);
        <bool>::sse_encode(self.is_active, serializer);
    }
}

impl SseEncode for crate::api::wm_interface::base::WorkspaceState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::wm_interface::base::WorkspaceItemState>>::sse_encode(
            self.items, serializer,
        );
        <Option<String>>::sse_encode(self.output, serializer);
        <bool>::sse_encode(self.has_workspace_focused, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use crate::api::wm_interface::base::WmInterface;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use crate::api::wm_interface::base::WmInterface;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
